#! /usr/bin/env python

# Need to implement:
#   -Filter <String>
#   -Include <String[]>
#   -Exclude <String[]>
#   -Recurse
#   -Depth <UInt32>
#   -Attributes <System.Management.Automation.FlagsExpression`1[System.IO.FileAttributes]>
#   -FollowSymLink
#   -ReadOnly
#   -System

# Partially implemented:
#   Path <String[]>
#       Currently can accept one argument, looping/recurse not working yet.

import os
from FilePermissions import *
from datetime import datetime
import argparse

working_directory = "./"
delimiter = "     "

parser = argparse.ArgumentParser()
parser.add_argument('path', metavar='P', type=str, nargs="?",
                    help='The path to get list of files/directories')
parser.add_argument('-Path', metavar='P', type=str,
                    help='The path to get list of files/directories')
parser.add_argument('-Force', action='store_true',
                    help='Includes hidden files')
parser.add_argument('-Hidden', action='store_true',
                    help='Only displays hidden files')
parser.add_argument('-Name', action='store_true',
                    help='Gets only the names of the items in the locations')
parser.add_argument('-File', action='store_true',
                    help='Only displays files')
parser.add_argument('-Directory', action='store_true',
                    help='Only displays directories')

args = parser.parse_args()

if args.path:
    working_directory = args.path

if args.Path:
    working_directory = args.Path

def print_file_row(file_stat,
                   file_path):
    """
    Prints the formatted row.

    Arguments:
        file_stat           tuple       os.stat return of the file
        file_path           str         The absolute filepath
    """
    mode = file_stat.st_mode
    if file_stat.st_mtime > file_stat.st_ctime:
        last_write = datetime.fromtimestamp(file_stat.st_mtime)
    else:
        last_write = datetime.fromtimestamp(file_stat.st_ctime)

    file_size_buffer = ""
    if len(str(file_stat.st_size)) < 7:
        file_size_length = 7 - len(str(file_stat.st_size))
        for space in range(1, file_size_length):
            file_size_buffer += " "

    if args.Name is True:
        print os.path.abspath(file_path)
    elif args.Name is False:
        print file_type + \
              UserPermissions.formatAsString(mode) + \
              GroupPermissions.formatAsString(mode) + \
              OtherPermissions.formatAsString(mode) + \
              delimiter + \
              last_write.strftime("%d/%m/%Y  %I:%M %p") + \
              delimiter + \
              str(file_size_buffer) + str(file_stat.st_size) + " " + \
              os.path.abspath(file_path)

# Header

print "\n" + "\n" + "    Directory: " + os.path.abspath(working_directory) + "\n" + "\n"

if args.Name is True:
    print "Name"
    print "----"
elif args.Name is False:
    print "Mode                  LastWriteTime     Length Name"
    print "----                  -------------     ------ ----"


for filename in os.listdir(working_directory):
    if working_directory[-1] != "/":
        file_path = working_directory + "/" + filename
    else:
        file_path = working_directory + filename
    file_stat = os.stat(file_path)

    # File type
    file_type = "-"
    if os.path.isdir(file_path):
        file_type = "d"

    # File Size
    file_size_buffer = ""
    if len(str(file_stat.st_size)) < 7:
        file_size_length = 7 - len(str(file_stat.st_size))
        for space in range(1, file_size_length):
            file_size_buffer += " "

    # Non-hidden file
    if all([file_type == "-",
            args.Directory is False,
            args.Hidden is False,
            not filename.startswith(".")]):
        print_file_row(file_stat,
                       file_path)

    # Hidden file
    if all([file_type == "-",
            args.Directory is False,
            (args.Hidden or args.Force),
            filename.startswith(".")]):
        print_file_row(file_stat,
                       file_path)

    # Non-hidden directory
    if all([file_type == "d",
            args.File is False,
            args.Hidden is False,
            not filename.startswith(".")]):
        print_file_row(file_stat,
                       file_path)

    # Hidden directory
    if all([file_type == "d",
            args.File is False,
            (args.Hidden or args.Force),
            filename.startswith(".")]):
        print_file_row(file_stat,
                       file_path)
